const { chromium } = require('playwright');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);
const { EmailReader, getVerificationCode, fetchMessage, fetchHeaders } = require('./email_reader');
require('dotenv').config();
const { loadProfiles } = require('./profiles');
const fs = require('fs').promises;
const initializeProfiles = require('./init-profiles');
const logger = require('./services/logger').withLabel('Towns');
const runLogin = require('./login');
const Imap = require('imap');
const simpleParser = require('mailparser').simpleParser;

const cleanup = async (browser) => {
  if (browser) {
    try {
      await browser.close();
      await killChrome();
      await new Promise(resolve => setTimeout(resolve, 2000));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
    }
  }
};

async function waitForPageReady(page) {
  console.log('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
  
  try {
    await Promise.race([
      Promise.all([
        page.waitForLoadState('domcontentloaded'),
        page.waitForLoadState('networkidle'),
        page.waitForFunction(() => {
          const loaders = document.querySelectorAll('[class*="loader"], [class*="loading"], [class*="spinner"]');
          return loaders.length === 0;
        }, { timeout: 10000 })
      ]),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 30000))
    ]);
  } catch (e) {
    console.log('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', e.message);
  }
  
  await page.waitForTimeout(1000);
  console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π');
}

async function killChrome() {
  try {
    if (process.platform === 'win32') {
      await execAsync('taskkill /F /IM chrome.exe /T');
      await execAsync('taskkill /F /IM chromium.exe /T');
    } else {
      await execAsync('pkill chrome');
      await execAsync('pkill chromium');
    }
  } catch (e) {
    console.log('–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome/Chromium');
  }
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ .env
const extensionId = process.env.METAMASK_EXTENSION_ID;
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º MetaMask Extension ID:', extensionId);

async function waitForMetaMaskWindow(browser, extensionId, maxAttempts = 30) {
    let attempt = 1;
    let metamaskPage = null;
    
    while (attempt <= maxAttempts) {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ MetaMask...`);
        const pages = await browser.pages();
        
        // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–∫–Ω–∞ MetaMask
        metamaskPage = pages.find(page => 
            page.url().includes(`chrome-extension://${extensionId}`) && 
            page.url().includes('home.html')
        );
        
        if (metamaskPage) {
            console.log('MetaMask –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ!');
            return metamaskPage;
        }
        
        // –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        console.log('–ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å MetaMask –Ω–∞–ø—Ä—è–º—É—é...');
        try {
            metamaskPage = await browser.newPage();
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è MetaMask
            const urls = [
                `chrome-extension://${extensionId}/home.html#`
            ];

            for (const url of urls) {
                console.log(`–ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å MetaMask –ø–æ URL: ${url}`);
                await metamaskPage.goto(url, {
                    waitUntil: 'networkidle',
                    timeout: 30000
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                const currentUrl = await metamaskPage.url();
                if (currentUrl.includes(`chrome-extension://${extensionId}`)) {
                    console.log('MetaMask –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ!');
                    return metamaskPage;
                }
                await metamaskPage.waitForTimeout(1000);
            }
            
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å MetaMask, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É...');
            await metamaskPage.close();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ MetaMask:', error.message);
            if (metamaskPage) {
                await metamaskPage.close();
            }
        }
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        attempt++;
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ MetaMask –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email
async function tryEmailLogin(townsPage) {
    const maxAttempts = 1;
    let attempts = 0;

    while (attempts < maxAttempts) {
        try {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –∏–∑ ${maxAttempts}: –Ω–∞–∂–∞—Ç–∏–µ Continue with Email...`);
            // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–∏
            await townsPage.locator('xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[2]/div/div[4]/button').click();
            await waitForPageReady(townsPage);
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Continue with Email');
            return true;
        } catch (error) {
            attempts++;
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É (–ø–æ–ø—ã—Ç–∫–∞ ${attempts})`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email
            try {
                const emailInput = await townsPage.waitForSelector('input[type="email"]', { timeout: 5000 });
                if (emailInput) {
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                    return true;
                }
            } catch (inputError) {
                console.log('–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É...');
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            if (attempts >= maxAttempts) {
                try {
                    const codeInput = await townsPage.waitForSelector('input[type="text"]', { timeout: 5000 });
                    if (codeInput) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                        return true;
                    }
                } catch (codeInputError) {
                    console.log('–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                }
                
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                if (await isLoginPage(townsPage)) {
                    console.log('‚úÖ –ú—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                    return true;
                }
            }

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –Ω–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if (await isLoginPage(townsPage)) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, –Ω–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        return true;
    }

    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
async function isLoginPage(page) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
        const emailInput = await page.$('input[type="email"]');
        const codeInput = await page.$('input[type="text"]');
        const loginForm = await page.$('div[class*="login"]') || await page.$('div[class*="auth"]');
        
        return !!(emailInput || codeInput || loginForm);
    } catch (error) {
        return false;
    }
}

async function main(profileId) {
    logger.info(`\nüöÄ towns.js –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: ${profileId}`);

    const profiles = await loadProfiles();
  
    if (!profiles[profileId]) {
        throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å ${profileId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }

    const profile = profiles[profileId];
    let browser;
  
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        try {
            await fs.access(profile.userDataDir);
            await fs.access(profile.authFile);
        } catch (error) {
            logger.info('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
            await initializeProfiles();
        }

        logger.info(`–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è: ${profile.name}`);
        await killChrome();
        
        await new Promise(resolve => setTimeout(resolve, 2000));

        const userDataDir = profile.userDataDir;
        const metamaskPath = process.env.METAMASK_PATH;

        logger.info('–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
        browser = await chromium.launchPersistentContext(userDataDir, {
            headless: false,
            args: [
                `--disable-extensions-except=${metamaskPath}`,
                `--load-extension=${metamaskPath}`,
                '--no-sandbox',
                '--start-maximized'
            ]
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è MetaMask
        const seedPhrase = profile.metamaskSeed;
        const password = profile.metamaskPassword;
        
        // –î–ª—è EmailReader –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const emailReader = new EmailReader(
            profile.email,
            profile.emailPassword
        );

        // –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è
        await browser.storageState({ path: profile.authFile });
        logger.info(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${profile.authFile}`);

        // –ñ–¥–µ–º –ø–æ–∫–∞ MetaMask –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è MetaMask...');
        let metamaskPage = null;
        try {
            metamaskPage = await waitForMetaMaskWindow(browser, extensionId);
        } catch (error) {
            logger.info('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å MetaMask, –ø—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–æ—Å–æ–±...');
            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            metamaskPage = await browser.newPage();
            await metamaskPage.goto(`chrome-extension://${extensionId}/home.html#unlock`);
            await metamaskPage.waitForTimeout(5000);
            
            if (!metamaskPage.url().includes('home.html')) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å MetaMask –Ω–∏–∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º');
            }
        }

        logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã MetaMask...');
        await metamaskPage.waitForLoadState('domcontentloaded');
        await metamaskPage.waitForTimeout(2000);

        // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (Import an existing wallet)
        logger.info('–í—ã–±–æ—Ä "Import an existing wallet"...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/ul/li[1]/div').click();
        await metamaskPage.waitForTimeout(1000);

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "I Agree"
        logger.info('–ù–∞–∂–∞—Ç–∏–µ "I Agree"...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/ul/li[3]/button').click();
        await metamaskPage.waitForTimeout(1000);

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        logger.info('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[2]/button[2]').click();
        await metamaskPage.waitForTimeout(1000);

        logger.info('–ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ —Å–∏–¥-—Ñ—Ä–∞–∑—ã...');
        
        // –í–≤–æ–¥ —Å–∏–¥-—Ñ—Ä–∞–∑—ã
        const seedWords = seedPhrase.split(' ');
        
        // –í–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —è—á–µ–π–∫—É —Å –Ω–æ–≤—ã–º–∏ XPath
        for (let i = 0; i < seedWords.length; i++) {
            const inputXPath = `xpath=/html/body/div[1]/div/div[2]/div/div/div/div[4]/div/div/div[3]/div[${i + 1}]/div[1]/div/input`;
            await metamaskPage.locator(inputXPath).fill(seedWords[i]);
            await metamaskPage.waitForTimeout(100);
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å–∏–¥-—Ñ—Ä–∞–∑—ã
        logger.info('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–¥-—Ñ—Ä–∞–∑—ã...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[4]/div/button').click();
        await metamaskPage.waitForTimeout(1000);

        // –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        logger.info('–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[2]/form/div[1]/label/input').fill(password);
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[2]/form/div[2]/label/input').fill(password);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–∞–ª–æ—á–∫–∏
        logger.info('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–∞–ª–æ—á–∫–∏...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[2]/form/div[3]/label').click();
        
        // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Import my wallet
        logger.info('–ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[2]/form/button').click();
        await metamaskPage.waitForTimeout(2000);

        // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Done
        logger.info('–ù–∞–∂–∞—Ç–∏–µ Done...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[3]/button').click();
        await metamaskPage.waitForTimeout(1000);

        // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Next
        logger.info('–ù–∞–∂–∞—Ç–∏–µ Next...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[2]/button').click();
        await metamaskPage.waitForTimeout(1000);

        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ Done
        logger.info('–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ Done...');
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div[2]/div/div/div/div[2]/button').click();
        await metamaskPage.waitForTimeout(1000);

        // –ñ–¥–µ–º –ø–æ–∫–∞ MetaMask –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MetaMask...');
        let isMetaMaskReady = false;
        for (let i = 0; i < 30; i++) { // –ú–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º/–∞–∫–∫–∞—É–Ω—Ç–æ–º
                const accountButton = await metamaskPage.$('xpath=/html/body/div[1]/div/div[2]/div/div[2]/div/div/button/span[1]/span');
                
                if (accountButton) {
                    logger.info('‚úÖ MetaMask —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                    isMetaMaskReady = true;
                    break;
                }
            } catch (e) {
                logger.info(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: MetaMask –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤...`);
            }
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        if (!isMetaMaskReady) {
            throw new Error('MetaMask –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫');
        }

        // –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MetaMask –æ—Ç–∫—Ä—ã–≤–∞–µ–º towns.com
        logger.info('–û—Ç–∫—Ä—ã—Ç–∏–µ towns.com...');
        const townsPage = await browser.newPage();
        await townsPage.goto('https://app.towns.com/', {
            waitUntil: 'networkidle',
            timeout: 60000
        });

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await waitForPageReady(townsPage);

        // –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞
        logger.info('–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞...');
        const loginButtonSelector = 'xpath=/html/body/div/div[1]/div/div[2]/div/div/div/button/div[1]';
        await townsPage.waitForSelector(loginButtonSelector, { 
            state: 'visible',
            timeout: 30000 
        });
        await townsPage.locator(loginButtonSelector).click();
        await waitForPageReady(townsPage);

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Email
        logger.info('–í—ã–±–æ—Ä –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Email...');
        await townsPage.locator('xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[3]/div/button[4]').click();
        await waitForPageReady(townsPage);

        logger.info('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email...');
        const emailLoginSuccess = await tryEmailLogin(townsPage);
        if (!emailLoginSuccess) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email');
        }

        // –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π email –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∏—Å—å–º–∞
        logger.info('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∏—Å–µ–º...');
        await emailReader.clearOldEmails();

        // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email...
        logger.info('–í–≤–æ–¥ iCloud email –∞–¥—Ä–µ—Å–∞...');
        await townsPage.locator('xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[2]/div/div[3]/div/label/input')
            .fill(profile.icloudEmail);

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Submit
        logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ email...');
        await townsPage.locator('xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[2]/div/div[3]/div/label/button').click();

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –ø–∏—Å—å–º–æ —Ç–æ—á–Ω–æ —É—Å–ø–µ–ª–æ –ø—Ä–∏–π—Ç–∏
        logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞...');
        await townsPage.waitForTimeout(3000);

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ email —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        logger.info('–ß—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ email...');
        let verificationCode = null;
        let attempts = 0;
        const maxAttempts = 3; // –£–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç—è–≥–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        const retryDelay = 10000; // 10 —Å–µ–∫—É–Ω–¥

        while (!verificationCode && attempts < maxAttempts) {
            attempts++;
            logger.info(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts} –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞...`);
            
            try {
                verificationCode = await getVerificationCode.call(emailReader);
                
                if (!verificationCode) {
                    logger.info(`–ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –∂–¥–µ–º ${retryDelay/1000} —Å–µ–∫—É–Ω–¥...`);
                    await townsPage.waitForTimeout(retryDelay);
                }
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ ${attempts} –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞:`, error.message);
                if (attempts < maxAttempts) {
                    logger.info(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${retryDelay/1000} —Å–µ–∫—É–Ω–¥...`);
                    await townsPage.waitForTimeout(retryDelay);
                }
            }
        }

        if (!verificationCode) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
        }

        // –í–≤–æ–¥–∏–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        logger.info('–í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
        for (let i = 0; i < 6; i++) {
            const inputSelector = `xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[2]/div[2]/div[1]/div[2]/input[${i + 1}]`;
            await townsPage.locator(inputSelector).fill(verificationCode[i]);
            await townsPage.waitForTimeout(100);
        }

        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
        await waitForPageReady(townsPage);

        // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        logger.info('–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è...');
        const profileButtonSelector = 'xpath=/html/body/div/div[1]/div/div[1]/div/div[4]/div[4]/div/div/div/div';
        await townsPage.waitForSelector(profileButtonSelector, { 
            state: 'visible',
            timeout: 100000
        });
        await townsPage.locator(profileButtonSelector).click();

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏
        /* 
        await townsPage.waitForSelector('xpath=/html/body/div/div[1]/div/div[2]/div/div/div/button/div[1]', { state: 'visible' });
        await townsPage.locator('xpath=/html/body/div/div[1]/div/div[2]/div/div/div/button/div[1]').click();
        */

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        await waitForPageReady(townsPage);

        // –î–∞–ª–µ–µ –∏–¥–µ–º –∫ Add Funds
        logger.info('–ù–∞–∂–∞—Ç–∏–µ Add Funds...');
        const addFundsSelector = 'xpath=/html/body/div/div[1]/div/div[2]/div[2]/div[3]/div/div[2]/div[2]/div/div/div[2]/div/div[2]/div/div/div[2]/div[2]/button';
        await townsPage.waitForSelector(addFundsSelector, { state: 'visible', timeout: 30000 });
        await townsPage.locator(addFundsSelector).click();

        // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∏–∫–æ–Ω–∫—É MetaMask
        logger.info('–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–∫–æ–Ω–∫—É MetaMask...');
        const metamaskIconSelector = 'xpath=/html/body/div/div[3]/div/div[2]/div/div/div/button';
        await townsPage.waitForSelector(metamaskIconSelector, { state: 'visible', timeout: 30000 });
        await townsPage.locator(metamaskIconSelector).click();

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É MetaMask (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —à–∞–≥)
        logger.info('–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ MetaMask...');
        const metamaskButtonSelector = 'xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[3]/button[1]';
        await townsPage.waitForSelector(metamaskButtonSelector, { state: 'visible', timeout: 30000 });
        await townsPage.locator(metamaskButtonSelector).click();

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask
        logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask...');
        await metamaskPage.goto(`chrome-extension://${extensionId}/home.html`);
        await waitForPageReady(metamaskPage);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã MetaMask...');
        await metamaskPage.reload();
        await waitForPageReady(metamaskPage);

        // –ñ–¥–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ MetaMask...');
        await waitForPageReady(metamaskPage);
        await metamaskPage.waitForSelector('xpath=/html/body/div[1]/div/div/div/div[2]/div/div[3]/div/div[2]/button[2]', { state: 'visible' });
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div/div/div[2]/div/div[3]/div/div[2]/button[2]').click();

        // –ñ–¥–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await waitForPageReady(metamaskPage);
        await metamaskPage.waitForSelector('xpath=/html/body/div[1]/div/div/div/div[2]/div[3]/button[2]', { state: 'visible' });
        await metamaskPage.locator('xpath=/html/body/div[1]/div/div/div/div[2]/div[3]/button[2]').click();

    } catch (error) {
        logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
        if (browser) {
            try {
                const pages = await browser.pages();
                for (let i = 0; i < pages.length; i++) {
                    await pages[i].screenshot({ path: `error-page-${i}.png` });
                }
            } catch (e) {
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:', e);
            }
        }
        throw error;
    } finally {
        if (browser) {
            await cleanup(browser);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
let currentBrowser = null;
process.on('SIGINT', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...');
    if (currentBrowser) {
        await cleanup(currentBrowser);
    }
    process.exit(0);
});

if (require.main === module) {
    const profileId = process.argv[2];
    if (!profileId) {
        console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø—Ä–æ—Ñ–∏–ª—è!');
        process.exit(1);
    }
    main(profileId).catch(console.error).finally(() => {
        process.exit(0);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    main,
    waitForPageReady,
    login: runLogin
};

