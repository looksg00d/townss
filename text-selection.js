const { runBrowser, closeBrowser } = require('./run-browser');
const logger = require('./services/logger').withLabel('TextSelection');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);
const { loadProfiles } = require('./profiles');
const path = require('path');
const fs = require('fs').promises;

// –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
const BASE_SAVE_PATH = path.join(process.cwd(), 'copied_texts');

/**
 * –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é PowerShell
 * @returns {Promise<string>} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
 */
async function readClipboard() {
  try {
    const { stdout } = await execAsync('powershell -command "Get-Clipboard"');
    return stdout.trim();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:', error.message);
    return '';
  }
}

async function waitForPageReady(page) {
  console.log('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
  
  try {
    await Promise.race([
      Promise.all([
        page.waitForLoadState('domcontentloaded'),
        page.waitForLoadState('networkidle'),
        page.waitForFunction(() => {
          const loaders = document.querySelectorAll('[class*="loader"], [class*="loading"], [class*="spinner"]');
          return loaders.length === 0;
        }, { timeout: 10000 })
      ]),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 30000))
    ]);
  } catch (e) {
    console.log('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', e.message);
  }
  
  await page.waitForTimeout(1000);
  console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π');
}

async function selectAndCopyText(profileId, url, browser) {
  logger.info(`\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: ${profileId}, URL: ${url}`);
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    if (!browser) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
    const page = await browser.newPage();
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ...');
    await page.goto(url, {
      waitUntil: 'domcontentloaded',
      timeout: 30000
    });
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await waitForPageReady(page);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await page.waitForTimeout(5000);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ
    logger.info('–ö–ª–∏–∫ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ (764, 101)...');
    await page.mouse.click(764, 101);
    await page.waitForTimeout(1000);
    
    // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    logger.info('–ù–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...');
    await page.mouse.down();
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º—ã—à—å –∫ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ —Å –∑–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π
    logger.info('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ –∫ —Ç–æ—á–∫–µ (950, 500)...');
    await page.mouse.move(950, 500, { steps: 10 });
    
    // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ —Å –∑–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
    logger.info('–û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ —Å –∑–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏...');
    await page.waitForTimeout(10000);
    
    // –û—Ç–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –º—ã—à–∏
    await page.mouse.up();
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    logger.info('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...');
    await page.keyboard.press('Control+C');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç —É—Å–ø–µ–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è
    await page.waitForTimeout(2000);
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
    const copiedText = await readClipboard();
    logger.info('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', copiedText);

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const saveDir = path.join(BASE_SAVE_PATH, profileId);
    logger.info(`–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${saveDir}`);
    await fs.mkdir(saveDir, { recursive: true });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const filename = `text_${timestamp}.txt`;
    const outputPath = path.join(saveDir, filename);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
    logger.info(`–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª: ${outputPath}`);
    await fs.writeFile(outputPath, copiedText, 'utf8');
    logger.info(`–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${outputPath}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.close();
    
    return {
      text: copiedText,
      filePath: outputPath
    };
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...');
    process.exit(0);
});

if (require.main === module) {
    const profileId = process.argv[2];
    const url = process.argv[3];
    
    if (!profileId || !url) {
        console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø—Ä–æ—Ñ–∏–ª—è –∏ URL!');
        process.exit(1);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    loadProfiles().then(async (profiles) => {
        const profile = profiles[profileId];
        if (!profile) {
            console.error(`–ü—Ä–æ—Ñ–∏–ª—å —Å ID ${profileId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            process.exit(1);
        }
        
        try {
            const browser = await runBrowser(profileId);
            const result = await selectAndCopyText(profileId, url, browser.browser);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            await closeBrowser(profileId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            process.exit(1);
        }
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
        process.exit(1);
    });
}

module.exports = {
    selectAndCopyText
}; 