const { loadProfiles } = require('./profiles');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);
const path = require('path');
const logger = require('./services/logger').withLabel('RunProfiles');
const { chromium } = require('playwright');
const EmailReader = require('./email_reader');
require('dotenv').config();

/**
 * –£–±–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome/Chromium.
 */
async function killChrome() {
    try {
        if (process.platform === 'win32') {
            await execAsync('taskkill /F /IM chrome.exe /T');
            await execAsync('taskkill /F /IM chromium.exe /T');
        } else {
            await execAsync('pkill chrome');
            await execAsync('pkill chromium');
        }
        logger.info('‚úÖ Chrome –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (e) {
        logger.info('–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome/Chromium');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome.
 */
async function checkSystemState() {
    try {
        await killChrome();
        await new Promise(resolve => setTimeout(resolve, 2000));
        return true;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:', error);
        return false;
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
 */
async function launchBrowser(profile) {
    logger.info(`–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profile.name}...`);
    
    const userDataDir = profile.userDataDir;
    const metamaskPath = process.env.METAMASK_PATH;

    const browser = await chromium.launchPersistentContext(userDataDir, {
        headless: false,
        args: [
            `--disable-extensions-except=${metamaskPath}`,
            `--load-extension=${metamaskPath}`,
            '--no-sandbox',
            '--start-maximized'
        ]
    });

    const page = await browser.newPage();
    return { browser, page };
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Towns –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
 */
async function runTownsForProfile(profileId) {
    logger.info(`–ó–∞–ø—É—Å–∫ Towns –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}...`);
    
    const profiles = await loadProfiles();
    const profile = profiles[profileId];
    
    if (!profile) {
        throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å ${profileId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }

    let browser;
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        const result = await launchBrowser(profile);
        browser = result.browser;
        const page = result.page;

        // –°–æ–∑–¥–∞–µ–º EmailReader –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
        const emailReader = new EmailReader(
            profile.email,
            profile.emailPassword,
            profile.icloudEmail
        );

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Towns
        logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Towns...');
        await page.goto('https://app.towns.com/', { 
            waitUntil: 'networkidle',
            timeout: 60000 
        });

        // –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞
        logger.info('–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞...');
        const loginButtonSelector = 'xpath=/html/body/div/div[1]/div/div[2]/div/div/div/button/div[1]';
        await page.waitForSelector(loginButtonSelector, { 
            state: 'visible',
            timeout: 30000 
        });
        await page.locator(loginButtonSelector).click();

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Email
        logger.info('–í—ã–±–æ—Ä –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Email...');
        await page.locator('xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[3]/div/button[4]').click();

        // –í–≤–æ–¥–∏–º email
        logger.info('–í–≤–æ–¥ iCloud email –∞–¥—Ä–µ—Å–∞...');
        await page.locator('xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[2]/div/div[3]/div/label/input')
            .fill(profile.icloudEmail);

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Submit
        logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ email...');
        await page.locator('xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[2]/div/div[3]/div/label/button').click();

        // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
        logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞...');
        await new Promise(resolve => setTimeout(resolve, 5000));

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ email
        logger.info('–ß—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ email...');
        const verificationCode = await emailReader.getVerificationCode();
        logger.info('–ü–æ–ª—É—á–µ–Ω –∫–æ–¥:', verificationCode);

        // –í–≤–æ–¥–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        logger.info('–í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
        for (let i = 0; i < 6; i++) {
            const inputSelector = `xpath=/html/body/div[2]/div/div/div/div[2]/div/div/div/div/div[1]/div[2]/div[2]/div[1]/div[2]/input[${i + 1}]`;
            await page.locator(inputSelector).fill(verificationCode[i]);
            await page.waitForTimeout(100);
        }

        // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        logger.info('–û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        await page.waitForTimeout(5000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
        await browser.storageState({ path: profile.authFile });
        logger.info(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${profile.authFile}`);

        logger.info('‚úÖ Towns —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è');
        return true;
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Towns:`, error.message);
        if (browser) {
            const pages = await browser.pages();
            for (let i = 0; i < pages.length; i++) {
                await pages[i].screenshot({ path: `error-${profileId}-${i}.png` });
            }
        }
        throw error;
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Towns –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.
 */
async function runProfiles(profileIds) {
    try {
        logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π:', profileIds);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        if (!await checkSystemState()) {
            throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        const profiles = await loadProfiles();
        logger.info(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${Object.keys(profiles).length}`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        for (const profileId of profileIds) {
            try {
                logger.info(`üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}...`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                if (!profiles[profileId]) {
                    logger.error(`–ü—Ä–æ—Ñ–∏–ª—å ${profileId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ profiles.json`);
                    continue;
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º Towns –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
                await runTownsForProfile(profileId);
                await killChrome();

                logger.info(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${profileId} –∑–∞–≤–µ—Ä—à—ë–Ω`);
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}:`, error.message);
                await killChrome();
            }

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
            if (profileId !== profileIds[profileIds.length - 1]) {
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }

        logger.info('–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error.message);
        throw error;
    }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–∑—ã–≤–∞–µ–º runProfiles
if (require.main === module) {
    const profileIds = process.argv.slice(2);
    if (profileIds.length === 0) {
        logger.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø—Ä–æ—Ñ–∏–ª–µ–π!');
        process.exit(1);
    }
    runProfiles(profileIds).catch(error => {
        logger.error('–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
        process.exit(1);
    });
}

module.exports = {
    runProfiles
}; 