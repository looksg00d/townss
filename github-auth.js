const { runBrowser, closeBrowser } = require('./run-browser');
const logger = require('./services/logger').withLabel('GitHubAuth');

async function waitForPageReady(page) {
    console.log('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    try {
        await Promise.race([
            Promise.all([
                page.waitForLoadState('domcontentloaded'),
                page.waitForLoadState('networkidle')
            ]),
            new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 30000))
        ]);
    } catch (e) {
        console.log('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', e.message);
    }
    
    await page.waitForTimeout(1000);
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π');
}

async function githubLogin(profileId, email, password) {
    logger.info(`\nüöÄ github-auth.js –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: ${profileId}`);
    let browser;
  
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        const browserData = await runBrowser(profileId);
        browser = browserData.browser;
        
        if (!browser) {
            throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const page = await browser.newPage();

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ GitHub
        logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ GitHub...');
        await page.goto('https://github.com/login', {
            waitUntil: 'domcontentloaded',
            timeout: 30000
        });
        await waitForPageReady(page);

        // –í–≤–æ–¥–∏–º email
        logger.info('–í–≤–æ–¥ email...');
        const emailSelector = '/html/body/div[1]/div[3]/main/div/div[4]/form/input[3]';
        await page.waitForSelector(`xpath=${emailSelector}`, { timeout: 30000 });
        await page.fill(`xpath=${emailSelector}`, email);
        await page.waitForTimeout(1000);

        // –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        logger.info('–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è...');
        const passwordSelector = '/html/body/div[1]/div[3]/main/div/div[4]/form/div/input[1]';
        await page.waitForSelector(`xpath=${passwordSelector}`, { timeout: 30000 });
        await page.fill(`xpath=${passwordSelector}`, password);
        await page.waitForTimeout(1000);

        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        logger.info('–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...');
        const loginSelector = '/html/body/div[1]/div[3]/main/div/div[4]/form/div/input[13]';
        await page.waitForSelector(`xpath=${loginSelector}`, { timeout: 30000 });
        await page.click(`xpath=${loginSelector}`);
        await waitForPageReady(page);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 2FA
        const currentUrl = page.url();
        if (currentUrl.includes('github.com/sessions/two-factor/app')) {
            logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2FA —É—Å–ø–µ—à–µ–Ω');
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–¥–æ–º 2FA
            const codePage = await browser.newPage();
            await codePage.goto('https://2fa.fb.rip/PLMAFMFNLFL4E6DI');
            await waitForPageReady(codePage);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ 2FA
            const code = await codePage.evaluate(() => {
                const codeElement = document.querySelector('#verifyCode');
                return codeElement ? codeElement.textContent : null;
            });

            if (!code) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ 2FA');
            }

            logger.info('–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ 2FA');
            await codePage.close();

            // –í–≤–æ–¥–∏–º –∫–æ–¥ 2FA
            const otpSelector = '/html/body/div[1]/div[3]/main/div/div[3]/div[2]/form/input[2]';
            await page.waitForSelector(`xpath=${otpSelector}`, { timeout: 30000 });
            await page.fill(`xpath=${otpSelector}`, code);
            await page.waitForTimeout(1000);

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const submitSelector = '/html/body/div[1]/div[3]/main/div/div[3]/div[2]/form/button';
            await page.waitForSelector(`xpath=${submitSelector}`, { timeout: 30000 });
            await page.click(`xpath=${submitSelector}`);
            await waitForPageReady(page);

            logger.info('‚úÖ GitHub –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2FA');
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –±—Ä–∞—É–∑–µ—Ä–æ–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return { browser, page };

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ GitHub:', error);
        if (browser) {
            try {
                const pages = await browser.pages();
                for (let i = 0; i < pages.length; i++) {
                    await pages[i].screenshot({ path: `error-page-${i}.png` });
                }
            } catch (e) {
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:', e);
            }
        }
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...');
    process.exit(0);
});

if (require.main === module) {
    const profileId = process.argv[2];
    const email = process.argv[3];
    const password = process.argv[4];
    
    if (!profileId || !email || !password) {
        console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø—Ä–æ—Ñ–∏–ª—è, email –∏ –ø–∞—Ä–æ–ª—å!');
        process.exit(1);
    }
    
    githubLogin(profileId, email, password).catch(console.error);
}

module.exports = {
    githubLogin
}; 