const EmailReader = require('../email_reader.js');
const path = require('path');
const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function testEmailReader() {
    let emailReader = null;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (!process.env.TXT_PATH) {
            throw new Error('–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TXT_PATH');
        }

        const configPath = path.join(process.env.TXT_PATH, 'gmail_config.txt');
        console.log('üìÇ –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑:', configPath);
        
        const gmailConfig = await fs.promises.readFile(configPath, 'utf8');
        const [email, password] = gmailConfig.trim().split('\n');

        if (!email || !password) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è email –∏ –ø–∞—Ä–æ–ª—å, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ');
        }

        console.log('üìß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ...');
        console.log(`Email: ${email.trim()}`);
        console.log('Password: ********');

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä EmailReader –æ–¥–∏–Ω —Ä–∞–∑
        emailReader = new EmailReader(email.trim(), password.trim(), 'imap.gmail.com');

        while (true) {
            try {
                console.log('\nüîÑ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º...');
                console.log('‚ö° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º, —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç');
                console.log('‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');

                const code = await emailReader.getVerificationCode(300000); // 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ
                console.log('\n‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥:', code);
                
                await new Promise((resolve) => {
                    rl.question('\nüîÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...', resolve);
                });
                
            } catch (error) {
                console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞:', error.message);
                
                await new Promise((resolve) => {
                    rl.question('\nüîÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...', resolve);
                });
            }
        }
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        if (error.code === 'ENOENT') {
            console.error(`–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${process.env.TXT_PATH}`);
            console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
            console.error('1. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è TXT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            console.error('2. –í –Ω–µ–π –µ—Å—Ç—å —Ñ–∞–π–ª gmail_config.txt');
            console.error('3. –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç email –∏ –ø–∞—Ä–æ–ª—å (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)');
        }
    } finally {
        rl.close();
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã—Ö–æ–¥–∞
process.on('SIGINT', async () => {
    console.log('\n\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞...');
    if (rl) {
        rl.close();
    }
    process.exit(0);
});

testEmailReader().catch(error => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
}); 