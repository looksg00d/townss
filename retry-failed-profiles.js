const { getFailedProfiles, removeFailedProfile } = require('./utils/errorTracker');
const { main: runTowns } = require('./towns');
const logger = require('./services/logger').withLabel('retry-profiles');

async function retryFailedProfiles() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    const failedProfiles = await getFailedProfiles();
    
    if (failedProfiles.length === 0) {
      logger.info('–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.');
      return;
    }
    
    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${failedProfiles.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: ${failedProfiles.join(', ')}`);
    
    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    readline.question('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π? (y/n): ', async (answer) => {
      readline.close();
      
      if (answer.toLowerCase() !== 'y') {
        logger.info('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        return;
      }
      
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
      for (const profileId of failedProfiles) {
        try {
          logger.info(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}...`);
          await runTowns(profileId);
          logger.info(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${profileId} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
          
          // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
          await removeFailedProfile(profileId);
        } catch (error) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}:`, error.message);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        if (profileId !== failedProfiles[failedProfiles.length - 1]) {
          const pauseTime = 5000;
          logger.info(`‚è≥ –ü–∞—É–∑–∞ ${pauseTime / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º...`);
          await new Promise(resolve => setTimeout(resolve, pauseTime));
        }
      }
      
      logger.info('–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.');
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  retryFailedProfiles();
}

module.exports = retryFailedProfiles; 