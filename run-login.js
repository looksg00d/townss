const { loadProfiles } = require('./profiles');
const { spawn } = require('child_process');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function killChrome() {
    try {
        if (process.platform === 'win32') {
            await execAsync('taskkill /F /IM chrome.exe /T');
            await execAsync('taskkill /F /IM chromium.exe /T');
        } else {
            await execAsync('pkill chrome');
            await execAsync('pkill chromium');
        }
        console.log('‚úÖ Chrome –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (e) {
        console.log('–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome/Chromium');
    }
}

async function checkSystemState() {
    try {
        await killChrome();
        await new Promise(resolve => setTimeout(resolve, 2000));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:', error);
        return false;
    }
}

async function askStartProfile() {
    return new Promise((resolve) => {
        rl.question('–° –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—á–∞—Ç—å? (–Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 1 –¥–ª—è profile1): ', (answer) => {
            const num = parseInt(answer, 10);
            resolve(num || 1);
        });
    });
}

async function askProfileCount() {
    return new Promise((resolve) => {
        rl.question('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?: ', (answer) => {
            const num = parseInt(answer, 10);
            rl.close();
            resolve(num || 1);
        });
    });
}

async function runLoginForProfile(profileId) {
    console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}...`);
    
    return new Promise(async (resolve) => {
        if (!await checkSystemState()) {
            console.error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É');
            resolve(false);
            return;
        }

        try {
            const profiles = await loadProfiles();
            if (!profiles[profileId]) {
                console.error(`–ü—Ä–æ—Ñ–∏–ª—å ${profileId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ profiles.json`);
                resolve(false);
                return;
            }

            const loginProcess = spawn('node', ['login.js', profileId], {
                stdio: 'inherit'
            });

            loginProcess.on('exit', async (code) => {
                console.log(`\n–ü—Ä–æ—Ü–µ—Å—Å login.js –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
                await killChrome();
                await new Promise(r => setTimeout(r, 2000));
                resolve(code === 0);
            });

            loginProcess.on('error', async (error) => {
                console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ login.js:`, error);
                await killChrome();
                resolve(false);
            });

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profileId}:`, error.message);
            await killChrome();
            resolve(false);
        }
    });
}

async function main() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
        const profiles = await loadProfiles();
        
        // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const startNum = await askStartProfile();
        const count = await askProfileCount();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        const profileIds = [];
        for (let i = 0; i < count; i++) {
            profileIds.push(`profile${startNum + i}`);
        }

        console.log(`\nüìã –ë—É–¥—É—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏: ${profileIds.join(', ')}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const stats = {
            total: profileIds.length,
            success: 0,
            failed: 0
        };

        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        for (const profileId of profileIds) {
            if (!profiles[profileId]) {
                console.error(`‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ${profileId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
                stats.failed++;
                continue;
            }

            console.log(`\nüîÑ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ${profileId} (${profiles[profileId].name})`);
            const success = await runLoginForProfile(profileId);
            
            if (success) {
                stats.success++;
            } else {
                stats.failed++;
            }

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
            if (profileId !== profileIds[profileIds.length - 1]) {
                console.log('‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º...');
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }

        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\nüìä –ò—Ç–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
        console.log(`–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${stats.total}`);
        console.log(`–£—Å–ø–µ—à–Ω–æ: ${stats.success}`);
        console.log(`–° –æ—à–∏–±–∫–∞–º–∏: ${stats.failed}`);

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', async () => {
    console.log('\n\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    await killChrome();
    process.exit(0);
});

if (require.main === module) {
    main().catch(console.error).finally(() => {
        process.exit(0);
    });
} 